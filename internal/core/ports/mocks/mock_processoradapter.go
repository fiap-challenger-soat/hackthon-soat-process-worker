// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports (interfaces: ProcessorAdapter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_processoradapter.go -package=mocks github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports ProcessorAdapter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessorAdapter is a mock of ProcessorAdapter interface.
type MockProcessorAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorAdapterMockRecorder
	isgomock struct{}
}

// MockProcessorAdapterMockRecorder is the mock recorder for MockProcessorAdapter.
type MockProcessorAdapterMockRecorder struct {
	mock *MockProcessorAdapter
}

// NewMockProcessorAdapter creates a new mock instance.
func NewMockProcessorAdapter(ctrl *gomock.Controller) *MockProcessorAdapter {
	mock := &MockProcessorAdapter{ctrl: ctrl}
	mock.recorder = &MockProcessorAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorAdapter) EXPECT() *MockProcessorAdapterMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockProcessorAdapter) Process(ctx context.Context, localVideoPath string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, localVideoPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Process indicates an expected call of Process.
func (mr *MockProcessorAdapterMockRecorder) Process(ctx, localVideoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessorAdapter)(nil).Process), ctx, localVideoPath)
}
