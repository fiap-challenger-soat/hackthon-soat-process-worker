// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports (interfaces: S3Adapter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_s3adapter.go -package=mocks github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports S3Adapter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockS3Adapter is a mock of S3Adapter interface.
type MockS3Adapter struct {
	ctrl     *gomock.Controller
	recorder *MockS3AdapterMockRecorder
	isgomock struct{}
}

// MockS3AdapterMockRecorder is the mock recorder for MockS3Adapter.
type MockS3AdapterMockRecorder struct {
	mock *MockS3Adapter
}

// NewMockS3Adapter creates a new mock instance.
func NewMockS3Adapter(ctrl *gomock.Controller) *MockS3Adapter {
	mock := &MockS3Adapter{ctrl: ctrl}
	mock.recorder = &MockS3AdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Adapter) EXPECT() *MockS3AdapterMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockS3Adapter) DownloadFile(ctx context.Context, objectKey string) (*domain.DownloadedFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, objectKey)
	ret0, _ := ret[0].(*domain.DownloadedFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockS3AdapterMockRecorder) DownloadFile(ctx, objectKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockS3Adapter)(nil).DownloadFile), ctx, objectKey)
}

// UploadFile mocks base method.
func (m *MockS3Adapter) UploadFile(ctx context.Context, localFilePath, objectKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, localFilePath, objectKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockS3AdapterMockRecorder) UploadFile(ctx, localFilePath, objectKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockS3Adapter)(nil).UploadFile), ctx, localFilePath, objectKey)
}
