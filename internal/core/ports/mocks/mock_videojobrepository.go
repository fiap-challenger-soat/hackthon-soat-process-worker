// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports (interfaces: VideoJobRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_videojobrepository.go -package=mocks github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports VideoJobRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockVideoJobRepository is a mock of VideoJobRepository interface.
type MockVideoJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideoJobRepositoryMockRecorder
	isgomock struct{}
}

// MockVideoJobRepositoryMockRecorder is the mock recorder for MockVideoJobRepository.
type MockVideoJobRepositoryMockRecorder struct {
	mock *MockVideoJobRepository
}

// NewMockVideoJobRepository creates a new mock instance.
func NewMockVideoJobRepository(ctrl *gomock.Controller) *MockVideoJobRepository {
	mock := &MockVideoJobRepository{ctrl: ctrl}
	mock.recorder = &MockVideoJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoJobRepository) EXPECT() *MockVideoJobRepositoryMockRecorder {
	return m.recorder
}

// GetJobByID mocks base method.
func (m *MockVideoJobRepository) GetJobByID(ctx context.Context, jobID string) (*domain.VideoJobDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", ctx, jobID)
	ret0, _ := ret[0].(*domain.VideoJobDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockVideoJobRepositoryMockRecorder) GetJobByID(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockVideoJobRepository)(nil).GetJobByID), ctx, jobID)
}

// UpdateJobStatus mocks base method.
func (m *MockVideoJobRepository) UpdateJobStatus(ctx context.Context, videoJob *domain.VideoJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", ctx, videoJob)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockVideoJobRepositoryMockRecorder) UpdateJobStatus(ctx, videoJob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockVideoJobRepository)(nil).UpdateJobStatus), ctx, videoJob)
}
