// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports (interfaces: JobService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_jobservice.go -package=mocks github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports JobService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJobService is a mock of JobService interface.
type MockJobService struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceMockRecorder
	isgomock struct{}
}

// MockJobServiceMockRecorder is the mock recorder for MockJobService.
type MockJobServiceMockRecorder struct {
	mock *MockJobService
}

// NewMockJobService creates a new mock instance.
func NewMockJobService(ctrl *gomock.Controller) *MockJobService {
	mock := &MockJobService{ctrl: ctrl}
	mock.recorder = &MockJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobService) EXPECT() *MockJobServiceMockRecorder {
	return m.recorder
}

// ProcessJob mocks base method.
func (m *MockJobService) ProcessJob(ctx context.Context, jobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessJob", ctx, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessJob indicates an expected call of ProcessJob.
func (mr *MockJobServiceMockRecorder) ProcessJob(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessJob", reflect.TypeOf((*MockJobService)(nil).ProcessJob), ctx, jobID)
}
