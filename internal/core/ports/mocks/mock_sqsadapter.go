// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports (interfaces: SQSAdapter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_sqsadapter.go -package=mocks github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/ports SQSAdapter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
	domain "github.com/fiap-challenger-soat/hackthon-soat-process-worker/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSQSAdapter is a mock of SQSAdapter interface.
type MockSQSAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockSQSAdapterMockRecorder
	isgomock struct{}
}

// MockSQSAdapterMockRecorder is the mock recorder for MockSQSAdapter.
type MockSQSAdapterMockRecorder struct {
	mock *MockSQSAdapter
}

// NewMockSQSAdapter creates a new mock instance.
func NewMockSQSAdapter(ctrl *gomock.Controller) *MockSQSAdapter {
	mock := &MockSQSAdapter{ctrl: ctrl}
	mock.recorder = &MockSQSAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQSAdapter) EXPECT() *MockSQSAdapterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSQSAdapter) Delete(ctx context.Context, receiptHandle string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, receiptHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSQSAdapterMockRecorder) Delete(ctx, receiptHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSQSAdapter)(nil).Delete), ctx, receiptHandle)
}

// Publish mocks base method.
func (m *MockSQSAdapter) Publish(ctx context.Context, event domain.JobErrorEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockSQSAdapterMockRecorder) Publish(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockSQSAdapter)(nil).Publish), ctx, event)
}

// Receive mocks base method.
func (m *MockSQSAdapter) Receive(ctx context.Context, maxMessages, waitTimeSeconds int32) ([]types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx, maxMessages, waitTimeSeconds)
	ret0, _ := ret[0].([]types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockSQSAdapterMockRecorder) Receive(ctx, maxMessages, waitTimeSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockSQSAdapter)(nil).Receive), ctx, maxMessages, waitTimeSeconds)
}
